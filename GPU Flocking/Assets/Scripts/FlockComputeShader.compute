#include "Utilities.cginc"
#pragma kernel CSMain

struct FlockUnit
{
    float3 flockPosition;
    float3 position;
    float3 rotation;
    float speed;
};

float3 currentVelocity;
float speed;

RWStructuredBuffer<FlockUnit> _flockUnitBuffer;
float _Time, _cohesionDistance, _FOVAngle, _cohesionWeight, _smoothDamp, _minSpeed, _maxSpeed;
float _avoidanceDistance, _avoidanceWeight, _alignmentDistance, _alignmentWeight, _boundsDistance, _boundsWeight;
uint _flockSize;

bool IsInFOV(float3 position, uint3 id)
{
    return Angle(_flockUnitBuffer[id.x].rotation, position - _flockUnitBuffer[id.x].position) <= _FOVAngle;
}

[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //COHESION, AVOIDANCE, ALIGNMENT
    float3 cohesion = float3(0.0, 0.0, 0.0);
    float3 avoidance = float3(0.0, 0.0, 0.0);
    float3 alignment = float3(0.0, 0.0, 1.0);

    

    float cohesionNeighbors = 0.0;
    float avoidanceNeighbors = 0.0;
    float alignmentNeighbors = 0.0;

    //CHECK NEIGHBORS
    for (uint i = 0; i < _flockSize; i++)
    {
        float currentNeighborDistanceSqr = SqrMagnitude(_flockUnitBuffer[i].position - _flockUnitBuffer[id.x].position);
        //COHESION NEIGHBORS
        if (currentNeighborDistanceSqr <= _cohesionDistance * _cohesionDistance && IsInFOV(_flockUnitBuffer[i].position, id))
        {
            cohesionNeighbors++;
            cohesion += _flockUnitBuffer[i].position;
            speed += _flockUnitBuffer[i].speed;
        }
        //AVOIDANCE NEIGHBORS
        if (currentNeighborDistanceSqr <= _avoidanceDistance * _avoidanceDistance && IsInFOV(_flockUnitBuffer[i].position, id))
        {
            avoidanceNeighbors++;
            avoidance += _flockUnitBuffer[id.x].position - _flockUnitBuffer[i].position;
        }
        //ALIGNMENT NEIGHBORS
        if (currentNeighborDistanceSqr <= _alignmentDistance * _alignmentDistance && IsInFOV(_flockUnitBuffer[i].position, id))
        {
            alignmentNeighbors++;
            alignment += _flockUnitBuffer[i].rotation;
        }
    }

    //CALCULATE SPEED
    speed /= cohesionNeighbors;
    speed = clamp(speed, _minSpeed, _maxSpeed);

    //CALCULATE COHESION
    cohesion /= cohesionNeighbors;
    cohesion -= _flockUnitBuffer[id.x].position;
    cohesion = Normalize(cohesion);
    cohesion *= _cohesionWeight;

    //CALCULATE AVOIDANCE
    avoidance /= avoidanceNeighbors;
    avoidance = Normalize(avoidance);
    avoidance *= _avoidanceWeight;

    //CALCULATE ALIGNMENT
    if (alignmentNeighbors > 0.0)
    {
        alignment /= alignmentNeighbors;
        alignment = Normalize(alignment);
    }
    alignment *= _alignmentWeight;

    //CALCULATE BOUNDS
    float3 bounds = float3(0.0, 0.0, 0.0);
    float3 offsetToCenter = _flockUnitBuffer[id.x].flockPosition - _flockUnitBuffer[id.x].position;
    if (Magnitude(offsetToCenter) >= _boundsDistance * 0.9)
        bounds = Normalize(offsetToCenter);
    bounds *= _boundsWeight;

    //MOVE AND ROTATE UNIT
    float3 moveVector = cohesion + avoidance + alignment + bounds;
    moveVector = SmoothDamp(_flockUnitBuffer[id.x].rotation, moveVector, currentVelocity, _smoothDamp, _Time);

    _flockUnitBuffer[id.x].rotation = moveVector;

    moveVector = Normalize(moveVector) * speed;
    float3 emptyVector = float3(0.0, 0.0, 0.0);
    if (VectorEquals(moveVector, emptyVector))
    {
        moveVector = _flockUnitBuffer[id.x].rotation;
    }

    _flockUnitBuffer[id.x].position += moveVector * _Time;
}
